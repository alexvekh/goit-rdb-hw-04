"# goit-rdb-hw-04" 

create schema LibraryManagement;

CREATE TABLE authors (
  author_id int NOT NULL AUTO_INCREMENT,
  author_name varchar(30),
  PRIMARY KEY (author_id)
);

CREATE TABLE genres (
  genre_id int NOT NULL AUTO_INCREMENT,
  genre_name varchar(60) DEFAULT NULL,
  PRIMARY KEY (`genre_id`)
);

CREATE TABLE books (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(60),
  publication_year YEAR,
  author_id INT,
  genre_id INT,
  FOREIGN KEY (author_id) REFERENCES authors(author_id),
  FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);

CREATE TABLE users (
	user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(30),
    email VARCHAR(30)
);

CREATE TABLE borrowed_books (
  borrow_id  INT PRIMARY KEY AUTO_INCREMENT,
  book_id INT,
  user_id INT,
  borrow_date  DATE,
  return_date DATE,
  FOREIGN KEY (book_id) REFERENCES books(book_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id)
);
------------------------------------------------------------------------------------------------------------------

use librarymanagement
INSERT INTO authors (author_name) VALUES ('Shevchenko');
INSERT INTO authors (author_name) VALUES ('Franko');
INSERT INTO authors (author_name) VALUES (Skovoroda);

INSERT INTO genres (genre_name) VALUES (поезія);
INSERT INTO genres (genre_name) VALUES (проза);

INSERT INTO users (username, email) VALUES ('Alex', 'alex@mail.com');
INSERT INTO users (username, email) VALUES ('Bob', 'bob@mail.com');
INSERT INTO users (username, email) VALUES ('Sam', 'sam@mail.com');
INSERT INTO users (username, email) VALUES ('Andrew', 'andrew@mail.com');

INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Кобзар', 1999, 1, 1);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Захар Беркут', 1996, 2, 2);
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES ('Сад божественних пісень', 2005, 3, 1);

INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (2, 3, '2025-01-01', '2025-01-05');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (1, 2, '2024-05-05', '2024-06-12');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (3, 1, '2024-07-07', '2024-08-08');
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES (2, 3, '2025-02-02', '2025-02-05');

--------------------------------------------------------------------------------------------------------------------

SELECT 
    od.order_id, od.quantity,
    o.date, c.name AS customer, c.contact as customer_contact, c.address AS customer_address, c.city AS customer_city, c.postal_code AS postal_code, c.country AS customer_country,
    p.name as product, p.unit, p.price AS product_price,
    cat.name as category, cat.description AS category_description,
    e.first_name AS employee_first_name, e.last_name AS employee_last_name,
    s.name AS supplier_name, s.contact AS supplier_contact,
    sh.name AS shipper_name, sh.phone AS shipper_phone
FROM order_details od
INNER JOIN orders o ON od.order_id = o.id
INNER JOIN customers c ON o.customer_id = c.id
INNER JOIN employees e ON o.employee_id = e.employee_id
INNER JOIN shippers sh ON o.shipper_id = sh.id
INNER JOIN products p ON od.product_id = p.id
INNER JOIN categories cat ON p.category_id = cat.id
INNER JOIN suppliers s ON p.supplier_id = s.id;


SELECT COUNT(*) AS total_rows
FROM order_details od
INNER JOIN orders o ON od.order_id = o.id
INNER JOIN customers c ON o.customer_id = c.id
INNER JOIN employees e ON o.employee_id = e.employee_id
INNER JOIN shippers sh ON o.shipper_id = sh.id
INNER JOIN products p ON od.product_id = p.id
INNER JOIN categories cat ON p.category_id = cat.id
INNER JOIN suppliers s ON p.supplier_id = s.id;

(tottal_rows) 518

SELECT COUNT(*) AS total_rows
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
RIGHT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id;
(tottal_rows) 535

 --------------------------------------------------------------------------------------------------------------
|	Висновок:                                                                                                   |
|		кількість рядків при LEFT JOIN не дуже змінюється, а а при RIGHT JOIN customers, збільшується,          |
|		як я розумію є 17 customers без замовлень (535-518=17).                                                 |
|		Так при LEFT JOIN вони не потрапляють до вибірки, а при RIGHT - порапляють з nuuls в поляк заказів      |
 -------------------------------------------------------------------------------------------------------------- 
 
SELECT COUNT(*) AS total_rows
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
RIGHT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
where e.employee_id > 3 and e.employee_id <= 10;
(tottal_rows) 317

SELECT 
	cat.name as category,
    COUNT(*) as total_rows,
    AVG(od.quantity) as average_order_quantity
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
RIGHT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name;


SELECT 
	cat.name as category,
    COUNT(*) as total_rows,
    AVG(od.quantity) as average_order_quantity
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
RIGHT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name
HAVING average_order_quantity > 21
ORDER BY average_order_quantity DESC;


SELECT 
	cat.name as category,
    COUNT(*) as total_rows,
    AVG(od.quantity) as average_order_quantity
FROM order_details od
RIGHT JOIN orders o ON od.order_id = o.id
RIGHT JOIN customers c ON o.customer_id = c.id
LEFT JOIN employees e ON o.employee_id = e.employee_id 
LEFT JOIN shippers sh ON o.shipper_id = sh.id
LEFT JOIN products p ON od.product_id = p.id
LEFT JOIN categories cat ON p.category_id = cat.id
LEFT JOIN suppliers s ON p.supplier_id = s.id
where e.employee_id > 3 and e.employee_id <= 10
group by cat.name
HAVING average_order_quantity > 21
ORDER BY average_order_quantity DESC
LIMIT 4 OFFSET 1;